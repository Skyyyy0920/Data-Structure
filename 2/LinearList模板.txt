#include<iostream>
using namespace std;

template<class T>
class LinearList {
	template<class Ta> friend ostream& operator<<(ostream& out, const LinearList<Ta>& x);
public:
	LinearList(int MaxListSize = 10);
	~LinearList() { delete element[]; }
	bool IsEmpty()const { return length == 0; }
	int GetLength()const { return length; }
	bool Find(int k, T& x)const;//第k位是否有值，如果有，赋值给x
	int Search(const T& x)const;
	LinearList<T>& Delete(int k, T& x);
	LinearList<T>& Insert(int k, const T& x);
private:
	int length;
	int MaxSize;
	T* element;
};

template<class T>
ostream& operator<<(ostream& out, const LinearList<T>& x) {
	for (int i = 0; i < length; i++)out << element[i] << " ";
	out << endl << "the length is:" << length;
	return out;
}

template<class T>
LinearList<T>::LinearList(int MaxListSize) {
	MaxSize = MaxListSize;
	element = new T[MaxSize + 1];
	length = 0;
}

template<class T>
bool LinearList<T>::Find(int k, T& x)const {
	if (k<0 || k>length)return false;
	x = element[k - 1];
	return true;
}

template<class T>
int LinearList<T>::Search(const T& x)const {
	for (int i = 0; i < length; i++)
		if (element[i] == x)
			return i + 1;
	return 0;
}

template<class T>
LinearList<T>& LinearList<T>::Delete(int k, T& x) {
	if (Find(k, x)) {//若要删除的值是一个合理的值
		for (int i = k; i < length; i++)
			element[i - 1] = element[i];
		length--;
		return *this;
	}
	cout << "wrong";//若k是一个不合理的值时
	return *this;
}

template<class T>
LinearList<T>& LinearList<T>::Insert(int k, const T& x) {
	if (k<0 || k>length)cout << "worng";//k非法
	if (length == MaxSize)cout << "wrong";//表已满
	for (int i = length - 1; i >= k; i--)
		element[i + 1] = element[i];
	element[k] = x;
	length++;
	return *this;
}